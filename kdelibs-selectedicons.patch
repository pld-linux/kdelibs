Index: kimageeffect.cpp
===================================================================
RCS file: /home/kde/kdelibs/kdeui/Attic/kimageeffect.cpp,v
retrieving revision 1.24
diff -u -p -r1.24 kimageeffect.cpp
--- kdelibs/kdeui/kimageeffect.cpp	2001/01/14 03:23:03	1.24
+++ kdelibs/kdeui/kimageeffect.cpp	2001/11/24 02:06:25
@@ -1819,6 +1819,71 @@ bool KImageEffect::blendOnLower(
   
   return true;
 }
+
+// For selected icons
+// Code added by David Faure - I couldn't find a similar effect
+// among the existing ones, but I may have overlooked...
+QImage& KImageEffect::selectedImage( QImage &img, const QColor &col )
+{
+    if ( img.depth() != 32 ) {
+#ifndef NDEBUG
+        qDebug("KImageEffect::selectedImage converting to 32 bit");
+#endif
+	img = img.convertDepth(32); // is this ok?
+    }
+    int w = img.width();
+    int h = img.height();
+    //QImage outImg(w, h, 32);
+
+    if (img.isNull())
+        return img;
+
+#define PIX(x,y)  (*((QRgb*)img.scanLine(y)+x) & 0x00ffffff)
+
+    // Determine background color from the 4 borders,
+    // code taken from QPixmap::createHeuristicMask
+    QRgb background = PIX(0,0);
+    if ( background != PIX(w-1,0) &&
+	 background != PIX(0,h-1) &&
+	 background != PIX(w-1,h-1) ) {
+	background = PIX(w-1,0);
+	if ( background != PIX(w-1,h-1) &&
+	     background != PIX(0,h-1) &&
+	     PIX(0,h-1) == PIX(w-1,h-1) ) {
+	    background = PIX(w-1,h-1);
+	}
+    }
+#undef PIX
+    //qDebug("background: %s",QString::number(background,16).ascii());
+
+    img.setAlphaBuffer( true ); // just in case
+
+    // Apply an overlay made of the 'selection color' with 50% transparency
+    // (that overlay is a mask of the icon, transparent where the icon is transparent)
+    int red = col.red();
+    int green = col.green();
+    int blue = col.blue();
+    int alpha = 0x7f;
+
+    for ( int y = 0; y < h; y++ ) {
+        //QRgb *outp = (QRgb*)outImg.scanLine(y);
+        QRgb *p = (QRgb *)img.scanLine(y);
+        QRgb *end = p + w;
+        for ( ; p < end; p++ /*, outp++*/ ) {
+            QRgb pix = *p;
+            if ( (pix & 0x00ffffff) != background )
+            {
+                // Note that qAlpha(pix) isn't used
+                int r = ((0xff-alpha) * qRed(pix) + alpha * red) >> 8;
+                int g = ((0xff-alpha) * qGreen(pix) + alpha * green) >> 8;
+                int b = ((0xff-alpha) * qBlue(pix) + alpha * blue) >> 8;
+
+                *p = qRgba(r, g, b, qAlpha(pix));
+            }
+        }
+    }
+    return img;
+}
 /*bool KImageEffect::blend(const QPixmap & upper, const QPixmap & lower, QPixmap & output)
 {
    QImage outputImage;
Index: kimageeffect.h
===================================================================
RCS file: /home/kde/kdelibs/kdeui/Attic/kimageeffect.h,v
retrieving revision 1.15
diff -u -p -r1.15 kimageeffect.h
--- kdelibs/kdeui/kimageeffect.h	2000/11/30 17:22:48	1.15
+++ kdelibs/kdeui/kimageeffect.h	2001/11/24 02:06:26
@@ -260,6 +260,14 @@ public:
      */
     static bool paint(int x, int y, QImage &tgt, const QImage &src);
 
+    /**
+     * Calculate the image for a selected image, for instance a selected icon
+     * on the desktop.
+     * @param img the QImage to select
+     * @param col the selected color, usually from QColorGroup::highlight().
+     */
+    static QImage& selectedImage( QImage &img, const QColor &col );
+
 private:
 
     /**
Index: kpixmapeffect.cpp
===================================================================
RCS file: /home/kde/kdelibs/kdeui/Attic/kpixmapeffect.cpp,v
retrieving revision 1.33
diff -u -p -r1.33 kpixmapeffect.cpp
--- kdelibs/kdeui/kpixmapeffect.cpp	2001/07/13 17:15:36	1.33
+++ kdelibs/kdeui/kpixmapeffect.cpp	2001/11/24 02:06:26
@@ -303,3 +303,18 @@ KPixmap& KPixmapEffect::dither(KPixmap &
 
     return pixmap;
 }
+
+//======================================================================
+//
+// Other effects
+//
+//======================================================================
+
+KPixmap KPixmapEffect::selectedPixmap( const KPixmap &pix, const QColor &col )
+{
+    QImage img = pix.convertToImage();
+    KImageEffect::selectedImage(img, col);
+    KPixmap outPix;
+    outPix.convertFromImage(img);
+    return outPix;
+}
Index: kpixmapeffect.h
===================================================================
RCS file: /home/kde/kdelibs/kdeui/Attic/kpixmapeffect.h,v
retrieving revision 1.30
diff -u -p -r1.30 kpixmapeffect.h
--- kdelibs/kdeui/kpixmapeffect.h	2001/01/12 18:37:14	1.30
+++ kdelibs/kdeui/kpixmapeffect.h	2001/11/24 02:06:26
@@ -145,7 +145,7 @@ public:
      */
     static KPixmap pattern(const KPixmap& pixmap, QSize size,
                    const QColor &ca, const QColor &cb, int ncols=8);
-    	
+
     /**
      * Recolor a pixmap.
      *
@@ -199,6 +199,14 @@ public:
      * @return Returns the @ref pixmap(), provided for convenience.
      */
     static KPixmap& dither(KPixmap &pixmap, const QColor *palette, int size);
+
+    /**
+     * Calculate a 'selected' pixmap, for instance a selected icon
+     * on the desktop.
+     * @param pixmap the pixmap to select
+     * @param col the selected color, usually from QColorGroup::highlight().
+     */
+    static KPixmap selectedPixmap( const KPixmap &pixmap, const QColor &col );
 };
 
 
