diff -Pur kdelibs-3.1.1-orig/arts/kde/kvideowidget.cpp kdelibs-3.1.1/arts/kde/kvideowidget.cpp
--- kdelibs-3.1.1-orig/arts/kde/kvideowidget.cpp	2003-03-14 23:06:58.000000000 +0100
+++ kdelibs-3.1.1/arts/kde/kvideowidget.cpp	2003-03-14 23:09:42.000000000 +0100
@@ -25,12 +25,85 @@
 #include "kvideowidget.h"
 
 
-class KFullscreenVideoWidget : public KVideoWidget
+static struct { const char *code; const char *language; } iso631_table[136] = {
+    { "aa", "Afar"		},  { "ab", "Abkhazian"		},
+    { "af", "Afrikaans"		},  { "am", "Amharic"		},
+    { "ar", "Arabic"		},  { "as", "Assamese"		},
+    { "ay", "Aymara"		},  { "az", "Azerbaijani"	},
+    { "ba", "Bashkir"		},  { "be", "Byelorussian"	},
+    { "bg", "Bulgarian"		},  { "bh", "Bihari"		},
+    { "bi", "Bislama"		},  { "bn", "Bengali; Bangla"	},
+    { "bo", "Tibetan"		},  { "br", "Breton"		},
+    { "ca", "Catalan"		},  { "co", "Corsican"		},
+    { "cs", "Czech"		},  { "cy", "Welsh"		},
+    { "da", "Danish"		},  { "de", "German"		},
+    { "dz", "Bhutani"		},  { "el", "Greek"		},
+    { "en", "English"		},  { "eo", "Esperanto"		},
+    { "es", "Spanish"		},  { "et", "Estonian"		},
+    { "eu", "Basque"		},  { "fa", "Persian"		},
+    { "fi", "Finnish"		},  { "fj", "Fiji"		},
+    { "fo", "Faeroese"		},  { "fr", "French"		},
+    { "fy", "Frisian"		},  { "ga", "Irish"		},
+    { "gd", "Scots Gaelic"	},  { "gl", "Galician"		},
+    { "gn", "Guarani"		},  { "gu", "Gujarati"		},
+    { "ha", "Hausa"		},  { "hi", "Hindi"		},
+    { "hr", "Croatian"		},  { "hu", "Hungarian"		},
+    { "hy", "Armenian"		},  { "ia", "Interlingua"	},
+    { "ie", "Interlingue"	},  { "ik", "Inupiak"		},
+    { "in", "Indonesian"	},  { "is", "Icelandic"		},
+    { "it", "Italian"		},  { "iw", "Hebrew"		},
+    { "ja", "Japanese"		},  { "ji", "Yiddish"		},
+    { "jw", "Javanese"		},  { "ka", "Georgian"		},
+    { "kk", "Kazakh"		},  { "kl", "Greenlandic"	},
+    { "km", "Cambodian"		},  { "kn", "Kannada"		},
+    { "ko", "Korean"		},  { "ks", "Kashmiri"		},
+    { "ku", "Kurdish"		},  { "ky", "Kirghiz"		},
+    { "la", "Latin"		},  { "ln", "Lingala"		},
+    { "lo", "Laothian"		},  { "lt", "Lithuanian"	},
+    { "lv", "Latvian, Lettish"	},  { "mg", "Malagasy"		},
+    { "mi", "Maori"		},  { "mk", "Macedonian"	},
+    { "ml", "Malayalam"		},  { "mn", "Mongolian"		},
+    { "mo", "Moldavian"		},  { "mr", "Marathi"		},
+    { "ms", "Malay"		},  { "mt", "Maltese"		},
+    { "my", "Burmese"		},  { "na", "Nauru"		},
+    { "ne", "Nepali"		},  { "nl", "Dutch"		},
+    { "no", "Norwegian"		},  { "oc", "Occitan"		},
+    { "om", "Oromo (Afan)"	},  { "or", "Oriya"		},
+    { "pa", "Punjabi"		},  { "pl", "Polish"		},
+    { "ps", "Pashto, Pushto"	},  { "pt", "Portuguese"	},
+    { "qu", "Quechua"		},  { "rm", "Rhaeto-Romance"	},
+    { "rn", "Kirundi"		},  { "ro", "Romanian"		},
+    { "ru", "Russian"		},  { "rw", "Kinyarwanda"	},
+    { "sa", "Sanskrit"		},  { "sd", "Sindhi"		},
+    { "sg", "Sangro"		},  { "sh", "Serbo-Croatian"	},
+    { "si", "Singhalese"	},  { "sk", "Slovak"		},
+    { "sl", "Slovenian"		},  { "sm", "Samoan"		},
+    { "sn", "Shona"		},  { "so", "Somali"		},
+    { "sq", "Albanian"		},  { "sr", "Serbian"		},
+    { "ss", "Siswati"		},  { "st", "Sesotho"		},
+    { "su", "Sudanese"		},  { "sv", "Swedish"		},
+    { "sw", "Swahili"		},  { "ta", "Tamil"		},
+    { "te", "Tegulu"		},  { "tg", "Tajik"		},
+    { "th", "Thai"		},  { "ti", "Tigrinya"		},
+    { "tk", "Turkmen"		},  { "tl", "Tagalog"		},
+    { "tn", "Setswana"		},  { "to", "Tonga"		},
+    { "tr", "Turkish"		},  { "ts", "Tsonga"		},
+    { "tt", "Tatar"		},  { "tw", "Twi"		},
+    { "uk", "Ukrainian"		},  { "ur", "Urdu"		},
+    { "uz", "Uzbek"		},  { "vi", "Vietnamese"	},
+    { "vo", "Volapuk"		},  { "wo", "Wolof"		},
+    { "xh", "Xhosa"		},  { "yo", "Yoruba"		},
+    { "zh", "Chinese"		},  { "zu", "Zulu"		}
+};
+
+
+class KFullscreenVideoWidget : public QWidget
 {
 public:
     KFullscreenVideoWidget( KVideoWidget *parent = 0, const char *name = 0 );
 
 protected:
+    virtual void mousePressEvent( QMouseEvent *event );
     virtual void windowActivationChange( bool );
     virtual bool x11Event( XEvent *event );
 
@@ -39,13 +112,31 @@
 };
 
 KFullscreenVideoWidget::KFullscreenVideoWidget( KVideoWidget *parent, const char *name )
-    : KVideoWidget( parent, name, WType_TopLevel | WStyle_Customize | WStyle_NoBorder )
+    : QWidget( parent, name, WType_TopLevel | WStyle_Customize | WStyle_NoBorder )
 {
-    this->videoWidget = parent;
     setEraseColor( black );
     setCursor(QCursor(Qt::BlankCursor));
+
+    videoWidget = parent;
+
+    // Leave fullscreen mode with <Escape> key
+    QAccel *accelEsc = new QAccel( this );
+    accelEsc->connectItem( accelEsc->insertItem( Key_Escape ),
+			   videoWidget, SLOT(setWindowed()) );
+}
+
+void KFullscreenVideoWidget::mousePressEvent( QMouseEvent *event )
+{
+    if (event->button() == RightButton)
+	videoWidget->clickRightButton( mapToGlobal( event->pos() ) );
 }
 
+void KVideoWidget::clickRightButton( const QPoint &p )
+{
+    emit rightButtonPressed( p );
+}
+
+
 void KFullscreenVideoWidget::windowActivationChange( bool )
 {
     if (!isActiveWindow())
@@ -120,7 +211,7 @@
 {
     if (isEmbedded())
     {
-	poVideo.x11WindowId( -1 );
+	poVideo.property( "Display.Window", -1 );
 	poVideo = Arts::VideoPlayObject::null();
     }
 
@@ -137,8 +228,11 @@
     {
 	if (isEmbedded())
 	{
-	    poVideo.x11WindowId( -1 );
+	    poVideo.property( "Display.Window", -1 );
 	    poVideo = Arts::VideoPlayObject::null();
+
+	    emit audioLanguagesChanged();
+	    emit subtitleLanguagesChanged();
 	}
 
 	setBackgroundMode( PaletteBackground );
@@ -151,14 +245,14 @@
 	if (isHalfSize() || isNormalSize() || isDoubleSize())
 	    emit adaptSize( 0, 0 );
 
-        enable = false;
+	enable = false;
 	updateGeometry();
     }
     else
     {
 	if (isEmbedded())
 	{
-	    poVideo.x11WindowId( -1 );
+	    poVideo.property( "Display.Window", -1 );
 	}
 
 	poVideo = vpo;
@@ -166,17 +260,20 @@
 	// Don't reset fullscreen mode for video playlists
 	if (fullscreenWidget)
 	{
-	    poVideo.x11WindowId( fullscreenWidget->winId() );
+	    poVideo.property( "Display.Window", fullscreenWidget->winId() );
 	    fullscreenWidget->setBackgroundMode( NoBackground );
 
 	    setEraseColor( black );
 	}
 	else
 	{
-	    poVideo.x11WindowId( winId() );
+	    poVideo.property( "Display.Window", winId() );
 	    setBackgroundMode( NoBackground );
 	}
-        enable = true;
+	enable = true;
+
+	emit audioLanguagesChanged();
+	emit subtitleLanguagesChanged();
     }
     action("double_size")->setEnabled(enable);
     action("half_size")->setEnabled(enable);
@@ -277,6 +374,24 @@
     doubleSizeActivated();
 }
 
+void KVideoWidget::setAudioChannel( int channel )
+{
+    if (!poVideo.isNull())
+    {
+	poVideo.property( "Display.AudioChannel", channel );
+	emit audioChannelChanged( channel );
+    }
+}
+
+void KVideoWidget::setSubtitleChannel( int channel )
+{
+    if (!poVideo.isNull())
+    {
+	poVideo.property( "Display.Subtitles", channel );
+	emit subtitleChannelChanged( channel );
+    }
+}
+
 QSize KVideoWidget::sizeHint() const
 {
     return QSize( videoWidth, videoHeight );
@@ -290,6 +405,109 @@
 		return int( double(w)*double(videoHeight)/double(videoWidth) );
 }
 
+QString KVideoWidget::getLanguageByCode( const QString &code )
+{
+    int left, right, middle;
+
+    left = 0;
+    right = 135;
+
+    QString str = code.stripWhiteSpace().lower();
+
+    // Find ISO-631 language using binary search
+    do
+    {
+	middle = (left + right + 1) / 2;
+
+	if (str < iso631_table[middle].code)
+	    right = (middle - 1);
+	else
+	    left = middle;
+    }
+    while (left < right);
+
+    if (str == iso631_table[left].code)
+    {
+	return QString( iso631_table[left].language );
+    }
+
+    return QString::null;
+}
+
+int KVideoWidget::getAudioChannel()
+{
+    return (!poVideo.isNull() ? poVideo.property( "Display.AudioChannel" ) : -1);
+}
+
+QValueVector<QString> KVideoWidget::getAudioLanguages()
+{
+    QValueVector<QString> vec;
+
+    if (!poVideo.isNull())
+    {
+	for (int i=1, n=poVideo.property( "Audio.Languages" ); i <= n; i++)
+	{
+	    long lang = poVideo.property( "Audio.Language." + QString::number( i ) );
+
+	    if (lang != -1)
+	    {
+		vec.append( QString( "" ) );
+	    }
+	    else
+	    {
+		char buf[5];
+
+		buf[0] = ((lang >> 24) & 0xFF);
+		buf[1] = ((lang >> 16) & 0xFF);
+		buf[2] = ((lang >> 8) & 0xFF);
+		buf[3] =  (lang & 0xFF);
+		buf[4] = 0;
+
+		vec.append( QString( buf ) );
+	    }
+	}
+    }
+
+    return vec;
+}
+
+int KVideoWidget::getSubtitleChannel()
+{
+    return (!poVideo.isNull() ? poVideo.property( "Display.Subtitles" ) : -1);
+}
+
+QValueVector<QString> KVideoWidget::getSubtitleLanguages()
+{
+    QValueVector<QString> vec;
+
+    if (!poVideo.isNull())
+    {
+	for (int i=1, n=poVideo.property( "Subtitles.Languages" ); i <= n; i++)
+	{
+	    long lang = poVideo.property( "Subtitles.Language." + QString::number( i ) );
+
+	    if (lang != -1)
+	    {
+		vec.append( QString( "" ) );
+	    }
+	    else
+	    {
+		char buf[5];
+
+		buf[0] = ((lang >> 24) & 0xFF);
+		buf[1] = ((lang >> 16) & 0xFF);
+		buf[2] = ((lang >> 8) & 0xFF);
+		buf[3] =  (lang & 0xFF);
+		buf[4] = 0;
+
+		vec.append( QString( buf ) );
+	    }
+	}
+    }
+
+    return vec;
+}
+
 void KVideoWidget::mousePressEvent( QMouseEvent *event )
 {
     if (event->button() == RightButton)
@@ -357,21 +575,12 @@
     {
 	fullscreenWidget = new KFullscreenVideoWidget( this );
 
-	// Interconnect right mouse button signals
-	connect( fullscreenWidget, SIGNAL(rightButtonPressed(const QPoint &)),
-		 this, SIGNAL(rightButtonPressed(const QPoint &)) );
-
-	// Leave fullscreen mode with <Escape> key
-	QAccel *a = new QAccel( fullscreenWidget );
-	a->connectItem( a->insertItem( Key_Escape ),
-			this, SLOT(setWindowed()) );
-
 	fullscreenWidget->showFullScreen();
 	fullscreenWidget->setFocus();
 
 	if (isEmbedded())
 	{
-	    poVideo.x11WindowId( fullscreenWidget->winId() );
+	    poVideo.property( "Display.Window", fullscreenWidget->winId() );
 	    fullscreenWidget->setBackgroundMode( NoBackground );
 	}
     }
@@ -379,7 +588,7 @@
     {
 	if (isEmbedded())
 	{
-	    poVideo.x11WindowId( winId() );
+	    poVideo.property( "Display.Window", winId() );
 	    setBackgroundMode( NoBackground );
 	}
 
diff -Pur kdelibs-3.1.1-orig/arts/kde/kvideowidget.h kdelibs-3.1.1/arts/kde/kvideowidget.h
--- kdelibs-3.1.1-orig/arts/kde/kvideowidget.h	2003-03-14 23:06:58.000000000 +0100
+++ kdelibs-3.1.1/arts/kde/kvideowidget.h	2003-03-14 23:07:50.000000000 +0100
@@ -13,45 +13,160 @@
 
 #include <qevent.h>
 #include <qimage.h>
+#include <qvaluevector.h>
 #include <qwidget.h>
 #include <kmedia2.h>
 #include <kxmlguiclient.h>
 
 
+/**
+ * Video widget class.
+ */
 class KVideoWidget : public QWidget, virtual public KXMLGUIClient
 {
 Q_OBJECT
 
 public:
+    /**
+     * Constructor.
+     */
     KVideoWidget( KXMLGUIClient *clientParent, QWidget *parent = 0, const char *name = 0, WFlags f = 0 );
+
+    /**
+     * Constructor.
+     */
     KVideoWidget( QWidget *parent = 0, const char *name = 0, WFlags f = 0 );
+
+    /**
+     * Destructor.
+     */
     virtual ~KVideoWidget();
 
+    /**
+     * Embed and display video on this widget.
+     * @param vpo the PlayObject to embed
+     */
     void embed( Arts::VideoPlayObject vpo );
+
+    /**
+     * Snapshot.
+     */
     static QImage snapshot( Arts::VideoPlayObject vpo );
 
+    /**
+     * Returns true if this widget is currently displaying a video.
+     */
     bool isEmbedded();
+
+    /**
+     * Returns true if the video is shown in full screen.
+     */
     bool isFullscreen();
+
+    /**
+     * Returns true if the video is shown at half size (50%).
+     */
     bool isHalfSize();
+
+    /**
+     * Returns true if the video is shown at normal size (100%).
+     */
     bool isNormalSize();
+
+    /**
+     * Returns true if the video is shown at double size (200%).
+     */
     bool isDoubleSize();
 
+    /**
+     * Returns the recommended size for the widget.
+     */
     QSize sizeHint() const;
 
+    /**
+     * Returns the preferred height for this widget, given the width w.
+     */
     virtual int heightForWidth ( int w ) const;
 
+    /**
+     * Get language by ISO-631 language code.
+     * @param code the language code
+     * @return the language in English
+     */
+    QString getLanguageByCode( const QString &code );
+
+    /**
+     * Returns the current audio channel.
+     */
+    int getAudioChannel();
+
+    /**
+     * Returns a list of available audio languages.
+     * Empty strings indicate the language of the channel is unknown.
+     */
+    QValueVector<QString> getAudioLanguages();
+
+    /**
+     * Returns the current subtitle channel or -1 if subtitles are
+     * disabled.
+     */
+    int getSubtitleChannel();
+
+    /**
+     * Returns a list of available subtitle languages.
+     * Empty strings indicate the language of the channel is unknown.
+     */
+    QValueVector<QString> getSubtitleLanguages();
+
 protected:
     virtual void mousePressEvent( QMouseEvent *event );
     virtual void resizeEvent( QResizeEvent *event );
     virtual bool x11Event( XEvent *event );
 
 public slots:
+				void clickRightButton( const QPoint &p );
+    /**
+     * Select full screen mode.
+     */
     void setFullscreen();
+
+    /**
+     * Select windowed mode.
+     */
     void setWindowed();
+
+    /**
+     * Select half (50%) video size, emits an 'adaptSize()' signal.
+     */
     void setHalfSize();
+
+    /**
+     * Select normal (100%) video size, emits an 'adaptSize()' signal.
+     */
     void setNormalSize();
+
+    /**
+     * Select double (200%) video size, emits an 'adaptSize()' signal.
+     */
     void setDoubleSize();
 
+    /**
+     * Select audio channel.
+     * @param channel the audio channel
+     */
+    void setAudioChannel( int channel );
+
+    /**
+     * Select subtitle channel.
+     * @param channel the subtitle channel or -1 to disable subtitles
+     */
+    void setSubtitleChannel( int channel );
+
+    /**
+     * Video display size change notification.
+     * @param width the new video display width
+     * @param height the new video display height
+     */
     void resizeNotify( int width, int height );
 
 protected slots:
@@ -61,8 +176,40 @@
     void doubleSizeActivated();
 
 signals:
+    /**
+     * Adapt GUI to new video size.
+     * @param width the suggested width for this widget
+     * @param height the suggested height for this widget
+     */
     void adaptSize( int width, int height );
-    void rightButtonPressed( const QPoint & );
+
+    /**
+     * Right mouse button pressed, 
+     * @param p the location of the mouse cursor
+     */
+    void rightButtonPressed( const QPoint &p );
+
+    /**
+     * Current audio channel or PlayObject has changed.
+     * @param channel the active audio channel
+     */
+    void audioChannelChanged( int channel );
+
+    /**
+     * List of audio languages or PlayObject has changed.
+     */
+    void audioLanguagesChanged();
+
+    /**
+     * Current subtitle channel or PlayObject has changed.
+     * @param channel the active subtitle channel
+     */
+    void subtitleChannelChanged( int channel );
+
+    /**
+     * List of subtitle languages or PlayObject has changed.
+     */
+    void subtitleLanguagesChanged();
 
 private:
     void init(void);
