--- kdelibs-3.5.12/kdecore/Makefile.am~	2010-08-12 06:04:03.000000000 +0300
+++ kdelibs-3.5.12/kdecore/Makefile.am	2011-01-04 19:13:22.247155923 +0200
@@ -121,9 +121,11 @@
 	kuser.cpp kconfigskeleton.cpp kconfigdialogmanager.cpp klockfile.cpp \
 	kqiodevicegzip_p.cpp ktimezones.cpp
 
+CXXFLAGS += -fexceptions
 libkdecore_la_LDFLAGS = $(QT_LDFLAGS) $(KDE_RPATH) $(KDE_MT_LDFLAGS) $(X_LDFLAGS) $(USER_LDFLAGS) -version-info 6:0:2 -no-undefined
 libkdecore_la_LIBADD = malloc/libklmalloc.la network/libkdecorenetwork.la $(SVGICON_LIB) ../dcop/libDCOP.la ../libltdl/libltdlc.la \
 	$(LIBART_LIBS) $(LIB_IDN) $(top_builddir)/kdefx/libkdefx.la $(LIB_QT) $(LIBSM) $(LIB_X11) $(LIBZ) $(LIBDL)
+libkdecore_la_LIBADD += -lboost_filesystem -lboost_system -lboost_regex
 libkdecore_la_NMCHECK = $(srcdir)/libkdecore.nmcheck
 libkdecore_la_NMCHECKWEAK = $(srcdir)/libkdecore_weak.nmcheck $(srcdir)/libqt-mt_weak.nmcheck \
 	$(top_srcdir)/dcop/libDCOP_weak.nmcheck $(top_srcdir)/kdecore/standard_weak.nmcheck
--- kdelibs-trinity-3.5.13.2/kdecore/CMakeLists.txt	2012-09-16 12:38:11.000000000 +0300
+++ kdelibs-trinity-3.5.13.2/kdecore/CMakeLists.txt	2014-05-28 11:47:09.882367608 +0300
@@ -125,11 +125,13 @@
   kqiodevicegzip_p.cpp ktimezones.cpp
 )
 
+add_definitions(-fexceptions)
+
 tde_add_library( ${target} SHARED AUTOMOC
   SOURCES ${${target}_SRCS}
   VERSION 4.2.0
   EMBED kdecorenetwork-static
-  LINK ltdlc-static ${KDESVGICONS} DCOP-shared kdefx-shared ${ZLIB_LIBRARIES} ${LIBIDN_LIBRARIES} ${XCOMPOSITE_LIBRARIES} ICE SM
+  LINK ltdlc-static ${KDESVGICONS} DCOP-shared kdefx-shared ${ZLIB_LIBRARIES} ${LIBIDN_LIBRARIES} ${XCOMPOSITE_LIBRARIES} ICE SM boost_filesystem boost_regex boost_system
   DEPENDENCIES dcopidl dcopidl2cpp
   DESTINATION ${LIB_INSTALL_DIR}
 )
--- kdelibs-3.5.5/kdecore/klibloader.h.orig	2005-10-10 17:06:03.000000000 +0200
+++ kdelibs-3.5.5/kdecore/klibloader.h	2007-01-04 23:19:39.868039250 +0100
@@ -270,7 +270,7 @@
      * wants to open modules.
      * @param name of the library. If it is not a path, the function searches in
      *             the "module" and "lib" resources. If there is no extension,
-     *             ".la" will be appended.
+     *             ".so*" will be appended.
      * @param instance a KInstance used to get the standard paths
      */
     static QString findLibrary( const char * name, const KInstance * instance = KGlobal::instance() );
--- kdelibs-trinity-3.5.13.2/kdecore/klibloader.cpp	2012-09-16 12:38:12.000000000 +0300
+++ kdelibs-trinity-3.5.13.2/kdecore/klibloader.cpp	2014-05-28 11:16:42.469374659 +0300
@@ -25,6 +25,12 @@
 #include <tqtimer.h>
 #include <tqobjectdict.h>
 
+#define BOOST_FILESYSTEM_VERSION 3
+#include <boost/filesystem/exception.hpp>
+#include <boost/filesystem/operations.hpp>
+#include <boost/filesystem/path.hpp>
+#include <boost/regex.hpp>
+
 #include "kapplication.h"
 #include "klibloader.h"
 #include "kstandarddirs.h"
@@ -331,46 +337,56 @@
     d = 0L;
 }
 
-static inline TQCString makeLibName( const char* name )
+TQCString makeSharedLibraryName( char const* name, TQString const& dir )
 {
-    TQCString libname(name);
-    // only append ".la" if there is no extension
-    // this allows to load non-libtool libraries as well
-    // (mhk, 20000228)
-    int pos = libname.findRev('/');
-    if (pos < 0)
-      pos = 0;
-    if (libname.find('.', pos) < 0)
-      libname += ".la";
-    return libname;
+	try
+	{
+		boost::filesystem::path d( dir.ascii() );
+		std::string p = d.string() + "/" + name + ".so";
+		if ( boost::filesystem::exists( p ) )
+			return p.c_str();
+		boost::regex re( p + "\\..+", boost::regex::extended );
+		for ( boost::filesystem::directory_iterator i( d );
+			i != boost::filesystem::directory_iterator(); ++i )
+		{
+			boost::smatch m;
+			if ( boost::regex_match( i->path().string(), m, re ) )
+				return m.str().c_str();
+		}
+	}
+	catch ( boost::filesystem::filesystem_error const& )
+	{
+	}
+	return TQCString();
 }
-
-//static
+ 
 TQString KLibLoader::findLibrary( const char * name, const KInstance * instance )
 {
-    TQCString libname = makeLibName( name );
-
-    // only look up the file if it is not an absolute filename
-    // (mhk, 20000228)
-    TQString libfile;
-    if (!TQDir::isRelativePath(libname))
-      libfile = TQFile::decodeName( libname );
-    else
-    {
-      libfile = instance->dirs()->findResource( "module", libname );
-      if ( libfile.isEmpty() )
-      {
-        libfile = instance->dirs()->findResource( "lib", libname );
-#ifndef NDEBUG
-        if ( !libfile.isEmpty() && libname.left(3) == "lib" ) // don't warn for kdeinit modules
-          kdDebug(150) << "library " << libname << " not found under 'module' but under 'lib'" << endl;
-#endif
-      }
-    }
-    return libfile;
+	try
+	{
+		if ( boost::filesystem::exists( name ) )
+			return name;
+	}
+	catch ( boost::filesystem::filesystem_error const& )
+	{
+	}
+	TQStringList dirs = instance->dirs()->resourceDirs( "module" );
+	for ( TQStringList::ConstIterator i = dirs.begin(); i != dirs.end(); ++i )
+	{
+		TQCString p = makeSharedLibraryName( name, *i );
+		if ( !p.isNull() )
+			return p;
+	}
+	dirs = instance->dirs()->resourceDirs( "lib" );
+	for ( TQStringList::ConstIterator i = dirs.begin(); i != dirs.end(); ++i )
+	{
+		TQCString p = makeSharedLibraryName( name, *i );
+		if ( !p.isNull() )
+			return p;
+	}
+	return TQString::null;
 }
 
-
 KLibrary* KLibLoader::globalLibrary( const char *name )
 {
 KLibrary *tmp;
@@ -418,11 +434,7 @@
       TQString libfile = findLibrary( name );
       if ( libfile.isEmpty() )
       {
-        const TQCString libname = makeLibName( name );
-#ifndef NDEBUG
-        kdDebug(150) << "library=" << name << ": No file named " << libname << " found in paths." << endl;
-#endif
-        d->errorMessage = i18n("Library files for \"%1\" not found in paths.").arg(TQString(libname));
+        d->errorMessage = i18n("Library files for \"%1\" not found in paths.").arg(name);
         return 0;
       }
 
--- kdelibs-3.5.12/kinit/kinit.cpp~	2011-01-04 19:12:44.000000000 +0200
+++ kdelibs-3.5.12/kinit/kinit.cpp	2011-01-04 19:14:15.985867931 +0200
@@ -447,7 +447,7 @@
   {
      /* Relative name without '.la' */
      name = _name;
-     lib = name + ".la";
+     lib = name;
      exec = name;
      libpath = QFile::encodeName(KLibLoader::findLibrary( lib, s_instance ));
      execpath = execpath_avoid_loops( exec, envc, envs, avoid_loops );
@@ -458,9 +458,7 @@
      name = _name;
      name = name.mid( name.findRev('/') + 1);
      exec = _name;
-     if (lib.right(3) == ".la")
-        libpath = lib;
-     else
+     if ( libpath.findRev( ".so" ) == -1 )
         execpath = exec;
   }
   if (!args)
@@ -1804,7 +1804,7 @@
 #ifndef __CYGWIN__
    if (!d.suicide && !getenv("KDE_IS_PRELINKED"))
    {
-      TQString konq = locate("lib", "libkonq.la", s_instance);
+      TQString konq = KLibLoader::findLibrary( "libkonq", s_instance );
       if (!konq.isEmpty())
 	  (void) lt_dlopen(TQFile::encodeName(konq).data());
    }
